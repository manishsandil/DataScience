#!/usr/bin/env python
# coding: utf-8

# # Import libraries and data sets

# In[7]:


# from sklearn.datasets import load_digits
# digits = load_digits()
# import ()
# pl.matshow(digits.images[6])
# pl.show()
# digits.images[6]
import matplotlib.pyplot as plt
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import seaborn as sns

data = pd.read_csv("train.csv").as_matrix()


# # Instantiate Classifier, prepare training data and fit the model

# In[8]:


model = DecisionTreeClassifier()

# #Prepare Training Data (o - 21000)
# X_train = data[0:21000,1:]
# y_train = data[0:21000,0]

# #Fit the model
# model.fit(X_train,y_train)
# #Prepare Test(from row 21000 onwards) and Label
# X_test = data[21000:,1:]
# y_label = data[21000:,0]
X = data[:,1:]
y = data[:,0]
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.20)


# # Fit/Test/Predict

# In[13]:


model.fit(X_train,y_train)

y_pred = model.predict(X_test)
print('Accuracy:',accuracy_score(y_test,y_pred)*100,'%')

cm = confusion_matrix(y_test,y_pred)
sns.heatmap(cm,annot=True)
# # Manual Test Predict
# #Input Digit
# i = 100
# digit = X_test[i]
# #Change shape of digit to 28 x 28 matrix, as its a row vector
# digit.shape = (28,28)

# #Show image
# plt.imshow(255-digit,cmap='gray')
# #Takes single row vector
# print(model.predict([X_test[i]]))
# plt.show()

